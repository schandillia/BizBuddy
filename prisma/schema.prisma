generator client {
  provider       = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum Channel {
  DISCORD
  EMAIL
  WEBEX
  SLACK
  NONE
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?  // Optional, can be null or empty for users who don't provide it
  image          String?  // Optional, for storing the user's profile image URL
  emailVerified  DateTime? // Optional, to track email verification status

  quotaLimit     Int
  plan           Plan @default(FREE)

  theme          Theme @default(SYSTEM)
  fontSize       Int @default(16)

  password       String?
  apiKey         String   @unique @default(cuid())
  apiKeyHint     String?

  // Channel fields
  activeChannel  Channel @default(NONE)
  discordId      String?
  emailId        String?
  webexId        String?   @unique
  slackId        String?   @unique

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  EventTypes     EventType[]
  events         Event[]
  Quota          Quota[]

  // Added fields
  accounts       Account[]
  sessions       Session[]
  Authenticator  Authenticator[]

  isTwoFactorEnabled  Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  webexVerified        DateTime?
  slackVerified        DateTime?
  discordVerified      DateTime?

  @@index([email, apiKey])
}

model EventType {
  id         String  @id @default(cuid())
  name       String
  slug       String
  color      Int
  emoji      String?

  user       User    @relation(fields: [userId], references: [id])
  userId     String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  events     Event[]

  @@unique([name, userId])
  @@unique([slug, userId])
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}

model Event {
  id              String @id @default(cuid())
  formattedMessage String

  user            User    @relation(fields: [userId], references: [id])
  userId          String

  name            String
  fields          Json

  deliveryStatus  DeliveryStatus @default(PENDING)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  EventType       EventType? @relation(fields: [EventTypeId], references: [id])
  EventTypeId     String?

  @@index([createdAt])
}

model Quota {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique

  year       Int
  month      Int
  count      Int @default(0)

  updatedAt  DateTime @updatedAt
}

// Account model for external authentication
model Account {
  userId               String
  type                 String
  provider             String
  providerAccountId    String
  refresh_token        String?
  access_token         String?
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?
  session_state        String?

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user                 User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// Session model for managing user sessions
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// VerificationToken model for token-based verification (e.g., email verification)
model VerificationToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
}

// PasswordResetToken model for token-based password reset
model PasswordResetToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id         String @id @default(cuid())

  userId     String
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model WebexVerificationToken {
  id         String   @id @default(cuid())
  webexId    String
  token      String   @unique
  expires    DateTime

  @@unique([webexId, token])
}

// Authenticator model for WebAuthn (Optional)
model Authenticator {
  credentialID        String   @unique
  userId              String
  providerAccountId   String
  credentialPublicKey String
  counter             Int
  credentialDeviceType String
  credentialBackedUp  Boolean
  transports          String?

  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model SlackVerificationToken {
  id         String   @id @default(cuid())
  slackId    String
  token      String   @unique
  expires    DateTime

  @@unique([slackId, token])
}

model DiscordVerificationToken {
  id        String    @id @default(cuid())
  token     String    @unique
  discordId String
  expires   DateTime?
  createdAt DateTime  @default(now())
}
