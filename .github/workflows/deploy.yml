name: Deploy Next.js App with Prisma

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
      WEBEX_BOT_TOKEN: ${{secrets.WEBEX_BOT_TOKEN}}
      WEBEX_BOT_ID: ${{secrets.WEBEX_BOT_ID}}
      SLACK_BOT_TOKEN: ${{secrets.SLACK_BOT_TOKEN}}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      AUTH_GOOGLE_ID: ${{ secrets.AUTH_GOOGLE_ID }}
      AUTH_GOOGLE_SECRET: ${{ secrets.AUTH_GOOGLE_SECRET }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Build the Next.js app
        run: pnpm build

      # Deployment step placeholder - uncomment and configure one of these based on your choice:

      # # Cloudflare deployment
      # - name: Deploy to Cloudflare
      #   env:
      #     CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      #   run: pnpm deploy

      # # Vercel deployment
      # - name: Deploy to Vercel
      #   env:
      #     VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      #     VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      #     VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      #   run: pnpm dlx vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}

      # # AWS Amplify deployment
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      # - name: Deploy to AWS Amplify
      #   run: |
      #     npm install -g @aws-amplify/cli
      #     amplify push --yes
